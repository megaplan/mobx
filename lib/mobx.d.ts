export { IAtom, Atom, BaseAtom } from "./core/atom";
export { IObservable, IDepTreeNode } from "./core/observable";
export { Reaction, IReactionPublic } from "./core/reaction";
export { IDerivation, untracked } from "./core/derivation";
export { useStrict } from "./core/action";
export { spy } from "./core/spy";
export { transaction } from "./core/transaction";
export { IComputedValue } from "./core/computedvalue";
export { asReference, asFlat, asStructure, asMap } from "./types/modifiers";
export { IInterceptable, IInterceptor } from "./types/intercept-utils";
export { IListenable } from "./types/listen-utils";
export { IObjectWillChange, IObjectChange, isObservableObject } from "./types/observableobject";
export { IValueWillChange, IObservableValue } from "./types/observablevalue";
export { IObservableArray, IArrayWillChange, IArrayWillSplice, IArrayChange, IArraySplice, isObservableArray, fastArray } from "./types/observablearray";
export { IKeyValueMap, ObservableMap, IMapEntries, IMapEntry, IMapWillChange, IMapChange, isObservableMap, map } from "./types/observablemap";
export { observable } from "./api/observable";
export { computed, IComputedValueOptions } from "./api/computeddecorator";
export { isObservable } from "./api/isobservable";
export { extendObservable } from "./api/extendobservable";
export { observe } from "./api/observe";
export { intercept } from "./api/intercept";
export { autorun, autorunAsync, autorunUntil, when, reaction } from "./api/autorun";
export { action, isAction, runInAction } from "./api/action";
export { expr } from "./api/expr";
export { toJSON, toJS } from "./api/tojs";
export { ITransformer, createTransformer } from "./api/createtransformer";
export { whyRun } from "./api/whyrun";
export { Lambda } from "./utils/utils";
export { SimpleSet, ISetEntry } from "./utils/set";
export { Iterator } from "./utils/iterable";
export { SimpleEventEmitter, ISimpleEventListener } from "./utils/simpleeventemitter";
export { IObserverTree, IDependencyTree } from "./api/extras";
import { IDepTreeNode } from "./core/observable";
import { IObserverTree, IDependencyTree } from "./api/extras";
import { Lambda } from "./utils/utils";
export declare const extras: {
    allowStateChanges: <T>(allowStateChanges: boolean, func: () => T) => T;
    getAtom: (thing: any, property?: string) => IDepTreeNode;
    getDebugName: (thing: any, property?: string) => string;
    getDependencyTree: (thing: any, property?: string) => IDependencyTree;
    getObserverTree: (thing: any, property?: string) => IObserverTree;
    isComputingDerivation: () => boolean;
    isSpyEnabled: () => boolean;
    resetGlobalState: () => void;
    spyReport: (event: any) => boolean;
    spyReportEnd: (change?: any) => void;
    spyReportStart: (event: any) => void;
    trackTransitions: (onReport?: (c: any) => void) => Lambda;
};
export declare const _: {
    getAdministration: (thing: any, property?: string) => any;
    resetGlobalState: () => void;
};
